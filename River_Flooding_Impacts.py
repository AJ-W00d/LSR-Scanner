{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import urllib.request\n",
    "from datetime import datetime\n",
    "from datetime import datetime, timedelta \n",
    "import geopandas as gpd\n",
    "import geoplot\n",
    "import geoplot.crs as gcrs\n",
    "import matplotlib.pyplot as plt\n",
    "import ssl\n",
    "ssl._create_default_https_context = ssl._create_unverified_context\n",
    "import urllib.request\n",
    "import tarfile\n",
    "import shapely\n",
    "from shapely import wkt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "date = datetime.today() + timedelta(days=1) \n",
    "date = date.strftime('%Y-%m-%d')\n",
    "\n",
    "date1 = datetime.today() - timedelta(days=10) \n",
    "date1 = date1.strftime('%Y-%m-%d')\n",
    "\n",
    "url = urllib.request.urlretrieve('https://mesonet.agron.iastate.edu/cgi-bin/request/gis/lsr.py?&sts='+date1+'T00:00Z&ets='+date+'T00:00Z&fmt=csv', r'report.csv')\n",
    "\n",
    "\n",
    "\n",
    "df = pd.read_csv('report.csv', on_bad_lines='skip')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Fill remark column with '' in place of Nans\n",
    "df['TYPETEXT'] = df['TYPETEXT'].fillna('')\n",
    "\n",
    "\n",
    "#df = df.dropna()\n",
    "df = df[df['TYPETEXT'].str.contains(\"FLOOD\")]\n",
    "df = df[~df['TYPETEXT'].str.contains(\"FLASH FLOOD\")]\n",
    "df = df[~df['TYPETEXT'].str.contains(\"COASTAL FLOOD\")]\n",
    "df = df[df.LON > -130]\n",
    "df = df[df.LON < -50]\n",
    "\n",
    "df['LAT'] = df['LAT'].astype(float)\n",
    "df = df[df.LAT > 20.00]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Needs work, script is not actually filtering the LSRs\n",
    "\n",
    "\n",
    "\n",
    "#Filter to find most likely river flooding events.\n",
    "#df =  df[df['REMARK'].str.contains(\"closed|river|River\")]\n",
    "#df =  df[df['REMARK'].str.contains(\"River\")]\n",
    "#df.to_csv(\"River_Only.csv\")\n",
    "\n",
    "import re\n",
    "# Remove column name 'MAG'\n",
    "df.drop(['MAG'], axis=1)\n",
    "\n",
    "keywords = [\"River\", \"stream\", \"overbank\", \"creek\", \"Creek\", \"Bayou\", \"bayou\", \"Banks\", \"banks\", \"Bank\", \"bank\", \"gage\", \"Gage\", \"road\"]\n",
    "# Function to check if any word in a text is in the list of keywords\n",
    "# Create a regular expression pattern from the list of keywords\n",
    "pattern = '|'.join(keywords)\n",
    "\n",
    "#Fill remark column with '' in place of Nans\n",
    "df['REMARK'] = df['REMARK'].fillna('')\n",
    "\n",
    "\n",
    "# Search for rows containing any of the keywords\n",
    "df = df[df['REMARK'].str.contains(pattern, flags=re.IGNORECASE)]\n",
    "\n",
    "df.to_csv(\"River_Only.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create geodataframe\n",
    "gdf = gpd.GeoDataFrame(\n",
    "    df, geometry=gpd.points_from_xy(df.LON, df.LAT), crs=\"EPSG:4326\")\n",
    "\n",
    "#Change Projection\n",
    "gdf = gdf.to_crs(epsg=3857)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "contiguous_usa = gpd.read_file(geoplot.datasets.get_path('contiguous_usa'),projection=gcrs.AlbersEqualArea())\n",
    "#contiguous_usa = contiguous_usa[contiguous_usa.state.isin(['Missouri', 'Oklahoma', 'Kansas', 'Texas', 'Louisiana', 'Illinois', \"Kentucky\", 'Tennessee', 'Arkansas', 'Mississippi', 'Louisiana'])]\n",
    "\n",
    "#Change Projection\n",
    "contiguous_usa = contiguous_usa.to_crs(epsg=3857)\n",
    "\n",
    "ax = contiguous_usa.plot(\n",
    "    color='lightgray', edgecolor='black')\n",
    "\n",
    "\n",
    "gdf.plot(ax=ax, color='deepskyblue',   markersize=10, edgecolors='black', linewidths=.1, label='Days 1-3')\n",
    "ax.legend(loc=\"lower left\")\n",
    "ax.set_title('7-Day Local Storm Reports beginning at 2100Z on ' + date)\n",
    "\n",
    "#plt.show()\n",
    "plt.savefig('lsr_'+date+'.png', dpi=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['REMARK']=df['REMARK'].astype(str)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#This will download the latest ahps shapefile\n",
    "\n",
    "#Download data and save the zipped shapefile\n",
    "urllib.request.urlretrieve('https://water.noaa.gov/resources/downloads/shapefiles/national_shapefile_fcst_ffep.tgz', r'ahps.tgz')\n",
    "\n",
    "#The file is zipped so now we have to unzip the file like we normally do with an AHPS Shapefile\n",
    "fname = 'ahps.tgz'\n",
    "if fname.endswith(\"ahps.tgz\"):\n",
    "    tar = tarfile.open(fname, \"r:gz\")\n",
    "    tar.extractall()\n",
    "    tar.close()\n",
    "elif fname.endswith(\"tar\"):\n",
    "    tar = tarfile.open(fname, \"r:\")\n",
    "    tar.extractall()\n",
    "    tar.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Every shapefile has a dbf file which is a table.We can now read that table and create a Pandas Dataframe with it.  \n",
    "table = gpd.read_file(r'national_shapefile_fcst_ffep.dbf')\n",
    "ahps = pd.DataFrame(table)\n",
    "#This will save it if you want to. It may be good to look at.\n",
    "ahps.to_csv('ahps.csv')\n",
    "#View the table just by using this line\n",
    "#ahps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the ahps DataFrame to a GeoDataFrame, adding a geometry column from the 'Latitude' and 'Longitude' columns\n",
    "# We're converting the ahps DataFrame to a GeoDataFrame with point geometries to enable spatial operations\n",
    "\n",
    "ahps = gpd.GeoDataFrame(ahps, geometry=gpd.points_from_xy(ahps.Longitude, ahps.Latitude), crs=\"EPSG:4326\")\n",
    "\n",
    "#Change Projection\n",
    "ahps = ahps.to_crs(epsg=3857)\n",
    "\n",
    "# Perform a spatial join between the GeoDataFrame gdf and the GeoDataFrame ahps, \n",
    "# keeping only the nearest match from ahps for each geometry in gdf.\n",
    "# This finds the nearest gage (point) for each geometry in gdf\n",
    "gdf_joined = gpd.sjoin_nearest(gdf, ahps, how='left')\n",
    "\n",
    "# Create a copy of the resulting GeoDataFrame gdf_joined\n",
    "# Creating a copy ensures that modifications to gdf won't affect gdf_joined\n",
    "gdf = gdf_joined.copy()\n",
    "\n",
    "# Convert the 'Latitude' and 'Longitude' columns to string data type\n",
    "# This conversion might be necessary for later string operations\n",
    "gdf = gdf.astype({'Latitude': 'str', 'Longitude': 'str'})\n",
    "\n",
    "# Create a new column 'geometry_ahps' by concatenating the 'Longitude' and 'Latitude' columns \n",
    "# and forming a Well-Known Text (WKT) representation of a point geometry\n",
    "# This creates a WKT representation of point geometries from the 'Latitude' and 'Longitude' columns\n",
    "gdf['geometry_ahps'] = \"POINT (\"+ gdf['Longitude']+\" \"+gdf['Latitude']+\")\"\n",
    "\n",
    "# Convert the 'geometry_ahps' column from WKT representation to Shapely geometries\n",
    "# Convert WKT strings to Shapely Point geometries\n",
    "gdf['geometry_ahps'] = gdf['geometry_ahps'].apply(wkt.loads)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a GeoSeries from the 'geometry_ahps' column and set its CRS to EPSG:4326\n",
    "gdf['geometry_ahps'] = gpd.GeoSeries(gdf['geometry_ahps'], crs=\"EPSG:4326\")\n",
    "\n",
    "# Ensure both geometry columns have the same CRS\n",
    "if gdf.crs != gdf['geometry_ahps'].crs:\n",
    "    gdf['geometry_ahps'] = gdf['geometry_ahps'].to_crs(gdf.crs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Calculate the distance between the 'geometry' and 'geometry_ahps' for each row in the GeoDataFrame\n",
    "# and store the result in a new column named 'distance'\n",
    "# This calculates the distance between each geometry in gdf and its corresponding geometry in 'geometry_ahps'\n",
    "gdf[\"distance\"] = gdf.apply(lambda row: row[\"geometry\"].distance(row[\"geometry_ahps\"]), axis=1)\n",
    "\n",
    "# Convert the distance from meters to miles and store the result in a new column named 'distance_miles'\n",
    "# Convert distances from meters to miles for convenience\n",
    "gdf[\"distance_miles\"] = gdf[\"distance\"]/1609\n",
    "\n",
    "#This will give us all the LSRs within 5 miles of a gage, which might be a good place to start.\n",
    "gdf = gdf[gdf['distance_miles'] < 5]\n",
    "\n",
    "gdf.to_csv('delete.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get USGS ID, this adds the usgs id which we will use to go to the usgs pages and pull the past #river stages and such\n",
    "\n",
    "#Download data and save the zipped shapefile\n",
    "#This was updated on 08/16/2024 to pull from NWPS rather than AHPS\n",
    "urllib.request.urlretrieve('https://water.noaa.gov/resources/downloads/reports/nwps_all_gauges_report.csv',r'nwps_all_gauges_report.csv')\n",
    "\n",
    "\n",
    "# Read the HTML table from the provided URL into a DataFrame\n",
    "# This table  contains information about AHPS (Advanced Hydrologic Prediction Service) site\n",
    "#table = 'https://water.weather.gov/monitor/ahpsreport.php'\n",
    "ahps = pd.read_csv('nwps_all_gauges_report.csv')\n",
    "\n",
    "# Select the first table from the list of tables extracted from the HTML page (No longer needed if not pulling from HTML)\n",
    "#ahps = ahps[0]\n",
    "\n",
    "# Drop rows where the 'usgs id' column is NaN (missing)\n",
    "# This is likely to remove rows where USGS IDs are not available, as they are needed to retrieve data\n",
    "ahps = ahps[ahps['usgs id'].notna()]\n",
    "\n",
    "# Create a new column 'GaugeLID' and set it equal to the values in the 'nws shef id' column\n",
    "# Convert the values to strings and convert them to uppercase\n",
    "ahps['GaugeLID'] = ahps['nws shef id']\n",
    "ahps['GaugeLID'] = ahps['GaugeLID'].astype(str)\n",
    "ahps['GaugeLID'] = ahps['GaugeLID'].str.upper()\n",
    "\n",
    "# Keep only the 'GaugeLID' and 'usgs id' columns in the DataFrame\n",
    "# This is to retain only the necessary information for merging with the main DataFrame gdf\n",
    "ahps = ahps[['GaugeLID', 'usgs id']]\n",
    "\n",
    "# Merge the main DataFrame gdf with the ahps DataFrame on the 'GaugeLID' column, using a left join\n",
    "# This adds the USGS ID information to the main DataFrame gdf based on the 'GaugeLID' column\n",
    "gdf = pd.merge(gdf, ahps, how='left', on=\"GaugeLID\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the 'datetime_column' to datetime format for begin date.\n",
    "gdf['begin_date'] = pd.to_datetime(gdf['VALID2'], format='%Y/%m/%d %H:%M')\n",
    "gdf['begin_date']=gdf['begin_date']- pd.to_timedelta(1, unit='d')\n",
    "gdf['begin_date']=gdf['begin_date'].dt.strftime('%Y-%m-%d')\n",
    "\n",
    "# Convert the 'datetime_column' to datetime format for end date.\n",
    "gdf['end_date'] = pd.to_datetime(gdf['VALID2'], format='%Y/%m/%d %H:%M')\n",
    "gdf['end_date']=gdf['end_date']+ pd.to_timedelta(1, unit='d')\n",
    "gdf['end_date']=gdf['end_date'].dt.strftime('%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#gdf = gdf.head(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#This goes to the USGS pages and pulls the data I can see some adjustments here though. \n",
    "#The begin_date and end_dates will probably just be the date of the LSR. This is from another #code so it may take some work\n",
    "\n",
    "def return_status(gdf):  \n",
    "    try:    \n",
    "        site = gdf['usgs id']\n",
    "        begin_date =gdf['begin_date']\n",
    "        end_date =gdf['end_date']\n",
    "\n",
    "        action = gdf['Action']\n",
    "        minor = gdf['Flood']\n",
    "        moderate = gdf['Moderate']\n",
    "        major = gdf['Major']\n",
    "\n",
    "\n",
    "        action = float(action)\n",
    "        minor = float(minor)\n",
    "        mod = float(moderate)\n",
    "        major = float(major)\n",
    "\n",
    "\n",
    "        table = 'https://nwis.waterdata.usgs.gov/usa/nwis/uv/?cb_00065=on&format=rdb&site_no='+site+'&period=&begin_date='+begin_date +'&end_date='+end_date\n",
    "        df = pd.read_fwf(table, comment='#')\n",
    "        df = df.iloc[1:,0].str.split(\"\\t\", expand = True)\n",
    "        df.rename(columns={0:'Agency', 1:'USGSstationID', 2:'Date', 4:'Stage'}, inplace=True)\n",
    "        df['Stage'] = df['Stage'].apply(pd.to_numeric, errors='coerce').dropna()\n",
    "        df['Date1'] = pd.to_datetime(df['Date'])\n",
    "\n",
    "        df['date'] = df['Date1'].dt.strftime('%Y-%m-%d, %H'+'00')\n",
    "\n",
    "\n",
    "        df = df.reset_index()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "        def f(df):\n",
    "            if df['Stage'] < action:\n",
    "                val = 'none'\n",
    "            elif df['Stage'] < minor and action == 0:\n",
    "                val = 'none'\n",
    "            elif action < df['Stage'] < minor:\n",
    "                val = 'action'\n",
    "            elif action < df['Stage'] and minor == 0 and mod == 0 and major == 0 and action != 0:\n",
    "                val = 'action'\n",
    "            elif minor < df['Stage'] < mod:\n",
    "                val = 'minor'\n",
    "            elif minor < df['Stage'] and mod == 0 and major == 0 and minor != 0:\n",
    "                val = 'minor'\n",
    "            elif mod < df['Stage'] < major:\n",
    "                val = 'moderate'     \n",
    "            elif mod < df['Stage'] and major == 0 and mod != 0:\n",
    "                val = 'moderate'\n",
    "            elif major < df['Stage'] and major != 0:\n",
    "                val = 'major'\n",
    "            else:\n",
    "                val = 'none'      \n",
    "            return val,\n",
    "\n",
    "        df[['status']] = df.apply(f,axis=1,result_type=\"expand\")\n",
    "        max_row =  df.loc[df['Stage'].idxmax()]\n",
    "        max_stage = max_row['Stage']\n",
    "        max_status = max_row['status']\n",
    "        max_date = max_row['date']\n",
    "\n",
    "        return max_stage, max_status, max_date,\n",
    "\n",
    "    except:\n",
    "        return 'error: USGS', 'error: USGS','error: USGS',\n",
    ",\n",
    "    \n",
    "gdf[['Max stage (ft)', 'Max status', 'Max date']] = gdf.apply(return_status,axis=1,result_type=\"expand\") \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "gdf.to_csv('delete.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#08/16/2024 Fixed the code that was previously pulling the river forecasts from AHPS. Updated to NWPS.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
